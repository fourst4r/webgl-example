// Generated by Haxe 4.2.0-rc.1+7dc565e63
(function ($global) { "use strict";
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw haxe_Exception.thrown("EReg::matched");
		}
	}
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	if(x != null) {
		var _g = 0;
		var _g1 = x.length;
		while(_g < _g1) {
			var i = _g++;
			var c = x.charCodeAt(i);
			if(c <= 8 || c >= 14 && c != 32 && c != 45) {
				var nc = x.charCodeAt(i + 1);
				var v = parseInt(x,nc == 120 || nc == 88 ? 16 : 10);
				if(isNaN(v)) {
					return null;
				} else {
					return v;
				}
			}
		}
	}
	return null;
};
var haxe_Exception = function(message,previous,native) {
	Error.call(this,message);
	this.message = message;
	this.__previousException = previous;
	this.__nativeException = native != null ? native : this;
};
haxe_Exception.__name__ = true;
haxe_Exception.thrown = function(value) {
	if(((value) instanceof haxe_Exception)) {
		return value.get_native();
	} else if(((value) instanceof Error)) {
		return value;
	} else {
		var e = new haxe_ValueException(value);
		return e;
	}
};
haxe_Exception.__super__ = Error;
haxe_Exception.prototype = $extend(Error.prototype,{
	get_native: function() {
		return this.__nativeException;
	}
});
var haxe_ValueException = function(value,previous,native) {
	haxe_Exception.call(this,String(value),previous,native);
	this.value = value;
};
haxe_ValueException.__name__ = true;
haxe_ValueException.__super__ = haxe_Exception;
haxe_ValueException.prototype = $extend(haxe_Exception.prototype,{
});
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.__name__ = true;
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g = 0;
			var _g1 = o.length;
			while(_g < _g1) {
				var i = _g++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( _g ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str.length != 2) {
			str += ", \n";
		}
		str += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str += "\n" + s + "}";
		return str;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_html__$CanvasElement_CanvasUtil = function() { };
js_html__$CanvasElement_CanvasUtil.__name__ = true;
js_html__$CanvasElement_CanvasUtil.getContextWebGL = function(canvas,attribs) {
	var name = "webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	var name = "experimental-webgl";
	var ctx = canvas.getContext(name,attribs);
	if(ctx != null) {
		return ctx;
	}
	return null;
};
var webglExample_Camera = function() {
	this.projection = new webglExample_Transformation();
	this.position = new webglExample_Transformation();
};
webglExample_Camera.__name__ = true;
webglExample_Camera.prototype = {
	setOrthographic: function(width,height,depth) {
		this.projection = new webglExample_Transformation();
		this.projection.fields[0] = 2 / width;
		this.projection.fields[5] = 2 / height;
		this.projection.fields[10] = -2 / depth;
	}
	,setPersepctive: function(verticalFov,aspectRatio,near,far) {
		var height_div_2n = Math.tan(verticalFov * Math.PI / 360);
		var width_div_2n = aspectRatio * height_div_2n;
		this.projection = new webglExample_Transformation();
		this.projection.fields[0] = 1 / height_div_2n;
		this.projection.fields[5] = 1 / width_div_2n;
		this.projection.fields[10] = (far + near) / (near - far);
		this.projection.fields[10] = -1;
		this.projection.fields[14] = 2 * far * near / (near - far);
		this.projection.fields[15] = 0;
	}
	,getInversePosition: function() {
		var orig = this.position.fields;
		var dest = new webglExample_Transformation();
		var x = orig[12];
		var y = orig[13];
		var z = orig[14];
		dest.fields[0] = orig[0];
		dest.fields[1] = orig[4];
		dest.fields[2] = orig[8];
		dest.fields[4] = orig[1];
		dest.fields[5] = orig[5];
		dest.fields[6] = orig[9];
		dest.fields[8] = orig[2];
		dest.fields[9] = orig[6];
		dest.fields[10] = orig[10];
		var x1 = -x;
		var y1 = -y;
		var z1 = -z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var mat = new webglExample_Transformation();
		mat.fields[12] = x1;
		mat.fields[13] = y1;
		mat.fields[14] = z1;
		var output = new webglExample_Transformation();
		var sum = 0.;
		sum += dest.fields[0] * mat.fields[0];
		sum += dest.fields[4] * mat.fields[1];
		sum += dest.fields[8] * mat.fields[2];
		sum += dest.fields[12] * mat.fields[3];
		output.fields[0] = sum;
		var sum = 0.;
		sum += dest.fields[0] * mat.fields[4];
		sum += dest.fields[4] * mat.fields[5];
		sum += dest.fields[8] * mat.fields[6];
		sum += dest.fields[12] * mat.fields[7];
		output.fields[4] = sum;
		var sum = 0.;
		sum += dest.fields[0] * mat.fields[8];
		sum += dest.fields[4] * mat.fields[9];
		sum += dest.fields[8] * mat.fields[10];
		sum += dest.fields[12] * mat.fields[11];
		output.fields[8] = sum;
		var sum = 0.;
		sum += dest.fields[0] * mat.fields[12];
		sum += dest.fields[4] * mat.fields[13];
		sum += dest.fields[8] * mat.fields[14];
		sum += dest.fields[12] * mat.fields[15];
		output.fields[12] = sum;
		var sum = 0.;
		sum += dest.fields[1] * mat.fields[0];
		sum += dest.fields[5] * mat.fields[1];
		sum += dest.fields[9] * mat.fields[2];
		sum += dest.fields[13] * mat.fields[3];
		output.fields[1] = sum;
		var sum = 0.;
		sum += dest.fields[1] * mat.fields[4];
		sum += dest.fields[5] * mat.fields[5];
		sum += dest.fields[9] * mat.fields[6];
		sum += dest.fields[13] * mat.fields[7];
		output.fields[5] = sum;
		var sum = 0.;
		sum += dest.fields[1] * mat.fields[8];
		sum += dest.fields[5] * mat.fields[9];
		sum += dest.fields[9] * mat.fields[10];
		sum += dest.fields[13] * mat.fields[11];
		output.fields[9] = sum;
		var sum = 0.;
		sum += dest.fields[1] * mat.fields[12];
		sum += dest.fields[5] * mat.fields[13];
		sum += dest.fields[9] * mat.fields[14];
		sum += dest.fields[13] * mat.fields[15];
		output.fields[13] = sum;
		var sum = 0.;
		sum += dest.fields[2] * mat.fields[0];
		sum += dest.fields[6] * mat.fields[1];
		sum += dest.fields[10] * mat.fields[2];
		sum += dest.fields[14] * mat.fields[3];
		output.fields[2] = sum;
		var sum = 0.;
		sum += dest.fields[2] * mat.fields[4];
		sum += dest.fields[6] * mat.fields[5];
		sum += dest.fields[10] * mat.fields[6];
		sum += dest.fields[14] * mat.fields[7];
		output.fields[6] = sum;
		var sum = 0.;
		sum += dest.fields[2] * mat.fields[8];
		sum += dest.fields[6] * mat.fields[9];
		sum += dest.fields[10] * mat.fields[10];
		sum += dest.fields[14] * mat.fields[11];
		output.fields[10] = sum;
		var sum = 0.;
		sum += dest.fields[2] * mat.fields[12];
		sum += dest.fields[6] * mat.fields[13];
		sum += dest.fields[10] * mat.fields[14];
		sum += dest.fields[14] * mat.fields[15];
		output.fields[14] = sum;
		var sum = 0.;
		sum += dest.fields[3] * mat.fields[0];
		sum += dest.fields[7] * mat.fields[1];
		sum += dest.fields[11] * mat.fields[2];
		sum += dest.fields[15] * mat.fields[3];
		output.fields[3] = sum;
		var sum = 0.;
		sum += dest.fields[3] * mat.fields[4];
		sum += dest.fields[7] * mat.fields[5];
		sum += dest.fields[11] * mat.fields[6];
		sum += dest.fields[15] * mat.fields[7];
		output.fields[7] = sum;
		var sum = 0.;
		sum += dest.fields[3] * mat.fields[8];
		sum += dest.fields[7] * mat.fields[9];
		sum += dest.fields[11] * mat.fields[10];
		sum += dest.fields[15] * mat.fields[11];
		output.fields[11] = sum;
		var sum = 0.;
		sum += dest.fields[3] * mat.fields[12];
		sum += dest.fields[7] * mat.fields[13];
		sum += dest.fields[11] * mat.fields[14];
		sum += dest.fields[15] * mat.fields[15];
		output.fields[15] = sum;
		return output;
	}
	,useCamera: function(shaderProgram) {
		var this1 = new Float32Array(this.projection.fields);
		shaderProgram.gl.uniformMatrix4fv(shaderProgram.projection,false,this1);
		var orig = this.position.fields;
		var dest = new webglExample_Transformation();
		var x = orig[12];
		var y = orig[13];
		var z = orig[14];
		dest.fields[0] = orig[0];
		dest.fields[1] = orig[4];
		dest.fields[2] = orig[8];
		dest.fields[4] = orig[1];
		dest.fields[5] = orig[5];
		dest.fields[6] = orig[9];
		dest.fields[8] = orig[2];
		dest.fields[9] = orig[6];
		dest.fields[10] = orig[10];
		var x1 = -x;
		var y1 = -y;
		var z1 = -z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var mat = new webglExample_Transformation();
		mat.fields[12] = x1;
		mat.fields[13] = y1;
		mat.fields[14] = z1;
		var output = new webglExample_Transformation();
		var sum = 0.;
		sum += dest.fields[0] * mat.fields[0];
		sum += dest.fields[4] * mat.fields[1];
		sum += dest.fields[8] * mat.fields[2];
		sum += dest.fields[12] * mat.fields[3];
		output.fields[0] = sum;
		var sum = 0.;
		sum += dest.fields[0] * mat.fields[4];
		sum += dest.fields[4] * mat.fields[5];
		sum += dest.fields[8] * mat.fields[6];
		sum += dest.fields[12] * mat.fields[7];
		output.fields[4] = sum;
		var sum = 0.;
		sum += dest.fields[0] * mat.fields[8];
		sum += dest.fields[4] * mat.fields[9];
		sum += dest.fields[8] * mat.fields[10];
		sum += dest.fields[12] * mat.fields[11];
		output.fields[8] = sum;
		var sum = 0.;
		sum += dest.fields[0] * mat.fields[12];
		sum += dest.fields[4] * mat.fields[13];
		sum += dest.fields[8] * mat.fields[14];
		sum += dest.fields[12] * mat.fields[15];
		output.fields[12] = sum;
		var sum = 0.;
		sum += dest.fields[1] * mat.fields[0];
		sum += dest.fields[5] * mat.fields[1];
		sum += dest.fields[9] * mat.fields[2];
		sum += dest.fields[13] * mat.fields[3];
		output.fields[1] = sum;
		var sum = 0.;
		sum += dest.fields[1] * mat.fields[4];
		sum += dest.fields[5] * mat.fields[5];
		sum += dest.fields[9] * mat.fields[6];
		sum += dest.fields[13] * mat.fields[7];
		output.fields[5] = sum;
		var sum = 0.;
		sum += dest.fields[1] * mat.fields[8];
		sum += dest.fields[5] * mat.fields[9];
		sum += dest.fields[9] * mat.fields[10];
		sum += dest.fields[13] * mat.fields[11];
		output.fields[9] = sum;
		var sum = 0.;
		sum += dest.fields[1] * mat.fields[12];
		sum += dest.fields[5] * mat.fields[13];
		sum += dest.fields[9] * mat.fields[14];
		sum += dest.fields[13] * mat.fields[15];
		output.fields[13] = sum;
		var sum = 0.;
		sum += dest.fields[2] * mat.fields[0];
		sum += dest.fields[6] * mat.fields[1];
		sum += dest.fields[10] * mat.fields[2];
		sum += dest.fields[14] * mat.fields[3];
		output.fields[2] = sum;
		var sum = 0.;
		sum += dest.fields[2] * mat.fields[4];
		sum += dest.fields[6] * mat.fields[5];
		sum += dest.fields[10] * mat.fields[6];
		sum += dest.fields[14] * mat.fields[7];
		output.fields[6] = sum;
		var sum = 0.;
		sum += dest.fields[2] * mat.fields[8];
		sum += dest.fields[6] * mat.fields[9];
		sum += dest.fields[10] * mat.fields[10];
		sum += dest.fields[14] * mat.fields[11];
		output.fields[10] = sum;
		var sum = 0.;
		sum += dest.fields[2] * mat.fields[12];
		sum += dest.fields[6] * mat.fields[13];
		sum += dest.fields[10] * mat.fields[14];
		sum += dest.fields[14] * mat.fields[15];
		output.fields[14] = sum;
		var sum = 0.;
		sum += dest.fields[3] * mat.fields[0];
		sum += dest.fields[7] * mat.fields[1];
		sum += dest.fields[11] * mat.fields[2];
		sum += dest.fields[15] * mat.fields[3];
		output.fields[3] = sum;
		var sum = 0.;
		sum += dest.fields[3] * mat.fields[4];
		sum += dest.fields[7] * mat.fields[5];
		sum += dest.fields[11] * mat.fields[6];
		sum += dest.fields[15] * mat.fields[7];
		output.fields[7] = sum;
		var sum = 0.;
		sum += dest.fields[3] * mat.fields[8];
		sum += dest.fields[7] * mat.fields[9];
		sum += dest.fields[11] * mat.fields[10];
		sum += dest.fields[15] * mat.fields[11];
		output.fields[11] = sum;
		var sum = 0.;
		sum += dest.fields[3] * mat.fields[12];
		sum += dest.fields[7] * mat.fields[13];
		sum += dest.fields[11] * mat.fields[14];
		sum += dest.fields[15] * mat.fields[15];
		output.fields[15] = sum;
		var this1 = new Float32Array(output.fields);
		shaderProgram.gl.uniformMatrix4fv(shaderProgram.view,false,this1);
	}
};
var webglExample_Light = function() {
	this.ambientLight = 0.3;
	this.lightDirection = new webglExample_geometry_Vector3(-1.,-1.,-1.);
};
webglExample_Light.__name__ = true;
webglExample_Light.prototype = {
	useLight: function(shaderProgram) {
		var dir = this.lightDirection;
		var gl = shaderProgram.gl;
		gl.uniform3f(shaderProgram.lightDirection,dir.x,dir.y,dir.z);
		gl.uniform1f(shaderProgram.ambientLight,this.ambientLight);
	}
};
var webglExample_Mesh = function(gl,geometry,texture) {
	var vertexCount = geometry.faces.length * 3;
	var answer = [];
	var positionExtract = function(answer,vertex) {
		var v = vertex.position;
		answer.push(v.x);
		answer.push(v.y);
		answer.push(v.z);
		return answer;
	};
	var len = geometry.faces.length;
	var vlen;
	var face;
	var vertex;
	var v;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		face = geometry.faces[i];
		vlen = face.vertices.length;
		var _g2 = 0;
		var _g3 = vlen;
		while(_g2 < _g3) {
			var j = _g2++;
			vertex = face.vertices[j];
			positionExtract(answer,vertex);
		}
	}
	this.positions = new webglExample_Vbo(gl,answer,vertexCount);
	var answer = [];
	var normalExtract = function(answer,vertex) {
		var v = vertex.normal;
		answer.push(v.x);
		answer.push(v.y);
		answer.push(v.z);
		return answer;
	};
	var len = geometry.faces.length;
	var vlen;
	var face;
	var vertex;
	var v;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		face = geometry.faces[i];
		vlen = face.vertices.length;
		var _g2 = 0;
		var _g3 = vlen;
		while(_g2 < _g3) {
			var j = _g2++;
			vertex = face.vertices[j];
			normalExtract(answer,vertex);
		}
	}
	this.normals = new webglExample_Vbo(gl,answer,vertexCount);
	var answer = [];
	var uvExtract = function(answer,vertex) {
		var v = vertex.uv;
		answer.push(v.x);
		answer.push(1 - v.y);
		return answer;
	};
	var len = geometry.faces.length;
	var vlen;
	var face;
	var vertex;
	var v;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		face = geometry.faces[i];
		vlen = face.vertices.length;
		var _g2 = 0;
		var _g3 = vlen;
		while(_g2 < _g3) {
			var j = _g2++;
			vertex = face.vertices[j];
			uvExtract(answer,vertex);
		}
	}
	this.uvs = new webglExample_Vbo(gl,answer,vertexCount);
	this.texture = texture;
	this.vertexCount = vertexCount;
	this.position = new webglExample_Transformation();
	this.gl = gl;
};
webglExample_Mesh.__name__ = true;
webglExample_Mesh.load = function(gl,modelUrl,textureUrl) {
	var geometry = webglExample_geometry_GeometryParser_loadOBJ(modelUrl);
	var texture = webglExample_Texture.load(gl,textureUrl);
	return Promise.all([geometry,texture]).then(function(params) {
		return new webglExample_Mesh(gl,params[0],params[1]);
	});
};
webglExample_Mesh.prototype = {
	destroy: function() {
		var _this = this.positions;
		_this.gl.deleteBuffer(_this.buffer);
		var _this = this.normals;
		_this.gl.deleteBuffer(_this.buffer);
		var _this = this.uvs;
		_this.gl.deleteBuffer(_this.buffer);
	}
	,draw: function(shaderProgram) {
		this.positions.bindToAttribute(shaderProgram.position);
		this.normals.bindToAttribute(shaderProgram.normal);
		this.uvs.bindToAttribute(shaderProgram.uv);
		var this1 = new Float32Array(this.position.fields);
		this.gl.uniformMatrix4fv(shaderProgram.model,false,this1);
		var _this = this.texture;
		var uniform = shaderProgram.diffuse;
		var texture = _this.data;
		var _2D = 3553;
		_this.gl.activeTexture(33984);
		_this.gl.bindTexture(_2D,texture);
		_this.gl.uniform1i(uniform,0);
		this.gl.drawArrays(4,0,this.vertexCount);
	}
};
var webglExample_Renderer = function(canvas) {
	this.gl = js_html__$CanvasElement_CanvasUtil.getContextWebGL(canvas,null);
	this.gl.enable(2929);
	this.shaderProgram = null;
};
webglExample_Renderer.__name__ = true;
webglExample_Renderer.prototype = {
	setClearColor: function(red,green,blue) {
		this.gl.clearColor(red / 255.,green / 255.,blue / 255.,1.);
	}
	,getContext: function() {
		return this.gl;
	}
	,setShader: function(shaderProgram) {
		console.log("src/webglExample/Renderer.hx:24:","shader set");
		this.shaderProgram = shaderProgram;
	}
	,render: function(camera,light,objects) {
		this.gl.clear(16640);
		if(this.shaderProgram == null) {
			return;
		}
		this.shaderProgram.useShader();
		light.useLight(this.shaderProgram);
		var shaderProgram = this.shaderProgram;
		var this1 = new Float32Array(camera.projection.fields);
		shaderProgram.gl.uniformMatrix4fv(shaderProgram.projection,false,this1);
		var orig = camera.position.fields;
		var dest = new webglExample_Transformation();
		var x = orig[12];
		var y = orig[13];
		var z = orig[14];
		dest.fields[0] = orig[0];
		dest.fields[1] = orig[4];
		dest.fields[2] = orig[8];
		dest.fields[4] = orig[1];
		dest.fields[5] = orig[5];
		dest.fields[6] = orig[9];
		dest.fields[8] = orig[2];
		dest.fields[9] = orig[6];
		dest.fields[10] = orig[10];
		var x1 = -x;
		var y1 = -y;
		var z1 = -z;
		if(z1 == null) {
			z1 = 0.;
		}
		if(y1 == null) {
			y1 = 0.;
		}
		if(x1 == null) {
			x1 = 0.;
		}
		var mat = new webglExample_Transformation();
		mat.fields[12] = x1;
		mat.fields[13] = y1;
		mat.fields[14] = z1;
		var output = new webglExample_Transformation();
		var sum = 0.;
		sum += dest.fields[0] * mat.fields[0];
		sum += dest.fields[4] * mat.fields[1];
		sum += dest.fields[8] * mat.fields[2];
		sum += dest.fields[12] * mat.fields[3];
		output.fields[0] = sum;
		var sum = 0.;
		sum += dest.fields[0] * mat.fields[4];
		sum += dest.fields[4] * mat.fields[5];
		sum += dest.fields[8] * mat.fields[6];
		sum += dest.fields[12] * mat.fields[7];
		output.fields[4] = sum;
		var sum = 0.;
		sum += dest.fields[0] * mat.fields[8];
		sum += dest.fields[4] * mat.fields[9];
		sum += dest.fields[8] * mat.fields[10];
		sum += dest.fields[12] * mat.fields[11];
		output.fields[8] = sum;
		var sum = 0.;
		sum += dest.fields[0] * mat.fields[12];
		sum += dest.fields[4] * mat.fields[13];
		sum += dest.fields[8] * mat.fields[14];
		sum += dest.fields[12] * mat.fields[15];
		output.fields[12] = sum;
		var sum = 0.;
		sum += dest.fields[1] * mat.fields[0];
		sum += dest.fields[5] * mat.fields[1];
		sum += dest.fields[9] * mat.fields[2];
		sum += dest.fields[13] * mat.fields[3];
		output.fields[1] = sum;
		var sum = 0.;
		sum += dest.fields[1] * mat.fields[4];
		sum += dest.fields[5] * mat.fields[5];
		sum += dest.fields[9] * mat.fields[6];
		sum += dest.fields[13] * mat.fields[7];
		output.fields[5] = sum;
		var sum = 0.;
		sum += dest.fields[1] * mat.fields[8];
		sum += dest.fields[5] * mat.fields[9];
		sum += dest.fields[9] * mat.fields[10];
		sum += dest.fields[13] * mat.fields[11];
		output.fields[9] = sum;
		var sum = 0.;
		sum += dest.fields[1] * mat.fields[12];
		sum += dest.fields[5] * mat.fields[13];
		sum += dest.fields[9] * mat.fields[14];
		sum += dest.fields[13] * mat.fields[15];
		output.fields[13] = sum;
		var sum = 0.;
		sum += dest.fields[2] * mat.fields[0];
		sum += dest.fields[6] * mat.fields[1];
		sum += dest.fields[10] * mat.fields[2];
		sum += dest.fields[14] * mat.fields[3];
		output.fields[2] = sum;
		var sum = 0.;
		sum += dest.fields[2] * mat.fields[4];
		sum += dest.fields[6] * mat.fields[5];
		sum += dest.fields[10] * mat.fields[6];
		sum += dest.fields[14] * mat.fields[7];
		output.fields[6] = sum;
		var sum = 0.;
		sum += dest.fields[2] * mat.fields[8];
		sum += dest.fields[6] * mat.fields[9];
		sum += dest.fields[10] * mat.fields[10];
		sum += dest.fields[14] * mat.fields[11];
		output.fields[10] = sum;
		var sum = 0.;
		sum += dest.fields[2] * mat.fields[12];
		sum += dest.fields[6] * mat.fields[13];
		sum += dest.fields[10] * mat.fields[14];
		sum += dest.fields[14] * mat.fields[15];
		output.fields[14] = sum;
		var sum = 0.;
		sum += dest.fields[3] * mat.fields[0];
		sum += dest.fields[7] * mat.fields[1];
		sum += dest.fields[11] * mat.fields[2];
		sum += dest.fields[15] * mat.fields[3];
		output.fields[3] = sum;
		var sum = 0.;
		sum += dest.fields[3] * mat.fields[4];
		sum += dest.fields[7] * mat.fields[5];
		sum += dest.fields[11] * mat.fields[6];
		sum += dest.fields[15] * mat.fields[7];
		output.fields[7] = sum;
		var sum = 0.;
		sum += dest.fields[3] * mat.fields[8];
		sum += dest.fields[7] * mat.fields[9];
		sum += dest.fields[11] * mat.fields[10];
		sum += dest.fields[15] * mat.fields[11];
		output.fields[11] = sum;
		var sum = 0.;
		sum += dest.fields[3] * mat.fields[12];
		sum += dest.fields[7] * mat.fields[13];
		sum += dest.fields[11] * mat.fields[14];
		sum += dest.fields[15] * mat.fields[15];
		output.fields[15] = sum;
		var this1 = new Float32Array(output.fields);
		shaderProgram.gl.uniformMatrix4fv(shaderProgram.view,false,this1);
		var mesh;
		var _g = 0;
		var _g1 = objects.length;
		while(_g < _g1) {
			var i = _g++;
			mesh = objects[i];
			var shaderProgram = this.shaderProgram;
			mesh.positions.bindToAttribute(shaderProgram.position);
			mesh.normals.bindToAttribute(shaderProgram.normal);
			mesh.uvs.bindToAttribute(shaderProgram.uv);
			var this1 = new Float32Array(mesh.position.fields);
			mesh.gl.uniformMatrix4fv(shaderProgram.model,false,this1);
			var _this = mesh.texture;
			var uniform = shaderProgram.diffuse;
			var texture = _this.data;
			var _2D = 3553;
			_this.gl.activeTexture(33984);
			_this.gl.bindTexture(_2D,texture);
			_this.gl.uniform1i(uniform,0);
			mesh.gl.drawArrays(4,0,mesh.vertexCount);
		}
	}
};
var webglExample_ShaderProgram = function(gl,vertSrc,fragSrc) {
	this.vert = gl.createShader(35633);
	gl.shaderSource(this.vert,vertSrc);
	gl.compileShader(this.vert);
	if(!gl.getShaderParameter(this.vert,35713)) {
		console.log("src/webglExample/ShaderProgram.hx:28:",gl.getShaderInfoLog(this.vert));
		$global.console.error("Failed to compile shader");
	}
	this.frag = gl.createShader(35632);
	gl.shaderSource(this.frag,fragSrc);
	gl.compileShader(this.frag);
	if(!gl.getShaderParameter(this.frag,35713)) {
		console.log("src/webglExample/ShaderProgram.hx:35:",gl.getShaderInfoLog(this.frag));
		$global.console.error("Failed to compile shader");
	}
	this.program = gl.createProgram();
	gl.attachShader(this.program,this.vert);
	gl.attachShader(this.program,this.frag);
	gl.linkProgram(this.program);
	if(!gl.getProgramParameter(this.program,35714)) {
		console.log("src/webglExample/ShaderProgram.hx:43:",gl.getProgramInfoLog(this.program));
		$global.console.error("Failed to link program");
	}
	this.gl = gl;
	this.position = gl.getAttribLocation(this.program,"position");
	this.normal = gl.getAttribLocation(this.program,"normal");
	this.uv = gl.getAttribLocation(this.program,"uv");
	this.model = gl.getUniformLocation(this.program,"model");
	this.view = gl.getUniformLocation(this.program,"view");
	this.projection = gl.getUniformLocation(this.program,"projection");
	this.ambientLight = gl.getUniformLocation(this.program,"ambientLight");
	this.lightDirection = gl.getUniformLocation(this.program,"lightDirection");
	this.diffuse = gl.getUniformLocation(this.program,"diffuse");
};
webglExample_ShaderProgram.__name__ = true;
webglExample_ShaderProgram.load = function(gl,vertUrl,fragUrl) {
	var url = vertUrl;
	var url1 = fragUrl;
	return Promise.all([new Promise(function(resolve,reject) {
		var xhr = new XMLHttpRequest();
		xhr.onreadystatechange = function() {
			if(xhr.readyState == 4) {
				resolve(xhr.responseText);
			}
		};
		xhr.open("GET",url,true);
		xhr.send(null);
	}),new Promise(function(resolve,reject) {
		var xhr = new XMLHttpRequest();
		xhr.onreadystatechange = function() {
			if(xhr.readyState == 4) {
				resolve(xhr.responseText);
			}
		};
		xhr.open("GET",url1,true);
		xhr.send(null);
	})]).then(function(files) {
		return new webglExample_ShaderProgram(gl,files[0],files[1]);
	});
};
webglExample_ShaderProgram.loadFile = function(url) {
	return new Promise(function(resolve,reject) {
		var xhr = new XMLHttpRequest();
		xhr.onreadystatechange = function() {
			if(xhr.readyState == 4) {
				resolve(xhr.responseText);
			}
		};
		xhr.open("GET",url,true);
		xhr.send(null);
	});
};
webglExample_ShaderProgram.prototype = {
	useShader: function() {
		this.gl.useProgram(this.program);
	}
};
var webglExample_Texture = function(gl,image) {
	var texture = gl.createTexture();
	gl.bindTexture(3553,texture);
	var rgba = 6408;
	var _2d = 3553;
	var linear = 9729;
	var mag = 10240;
	var min = 10241;
	var unsigned = 5121;
	gl.texImage2D(_2d,0,rgba,rgba,unsigned,image);
	gl.texParameteri(_2d,mag,linear);
	gl.texParameteri(_2d,min,linear);
	this.data = texture;
	this.gl = gl;
};
webglExample_Texture.__name__ = true;
webglExample_Texture.load = function(gl,url) {
	return new Promise(function(resolve,reject) {
		var image = new Image();
		image.onload = function() {
			resolve(new webglExample_Texture(gl,image));
		};
		image.src = url;
	});
};
webglExample_Texture.prototype = {
	useTexture: function(uniform,binding) {
		var texture = this.data;
		var _2D = 3553;
		switch(binding) {
		case 0:
			this.gl.activeTexture(33984);
			break;
		case 1:
			this.gl.activeTexture(33985);
			break;
		case 2:
			this.gl.activeTexture(33986);
			break;
		case 3:
			this.gl.activeTexture(33987);
			break;
		case 4:
			this.gl.activeTexture(33988);
			break;
		case 5:
			this.gl.activeTexture(33989);
			break;
		case 6:
			this.gl.activeTexture(33990);
			break;
		default:
			this.gl.activeTexture(33991);
		}
		this.gl.bindTexture(_2D,texture);
		this.gl.uniform1i(uniform,binding);
	}
	,activateTexture: function(texture,imageIndex) {
		var _2D = 3553;
		switch(imageIndex) {
		case 0:
			this.gl.activeTexture(33984);
			break;
		case 1:
			this.gl.activeTexture(33985);
			break;
		case 2:
			this.gl.activeTexture(33986);
			break;
		case 3:
			this.gl.activeTexture(33987);
			break;
		case 4:
			this.gl.activeTexture(33988);
			break;
		case 5:
			this.gl.activeTexture(33989);
			break;
		case 6:
			this.gl.activeTexture(33990);
			break;
		default:
			this.gl.activeTexture(33991);
		}
		this.gl.bindTexture(_2D,texture);
	}
};
var webglExample_Transformation = function() {
	this.fields = [1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.,0.,0.,0.,0.,1.];
};
webglExample_Transformation.__name__ = true;
webglExample_Transformation.prototype = {
	mult: function(t) {
		var output = new webglExample_Transformation();
		var sum = 0.;
		sum += this.fields[0] * t.fields[0];
		sum += this.fields[4] * t.fields[1];
		sum += this.fields[8] * t.fields[2];
		sum += this.fields[12] * t.fields[3];
		output.fields[0] = sum;
		var sum = 0.;
		sum += this.fields[0] * t.fields[4];
		sum += this.fields[4] * t.fields[5];
		sum += this.fields[8] * t.fields[6];
		sum += this.fields[12] * t.fields[7];
		output.fields[4] = sum;
		var sum = 0.;
		sum += this.fields[0] * t.fields[8];
		sum += this.fields[4] * t.fields[9];
		sum += this.fields[8] * t.fields[10];
		sum += this.fields[12] * t.fields[11];
		output.fields[8] = sum;
		var sum = 0.;
		sum += this.fields[0] * t.fields[12];
		sum += this.fields[4] * t.fields[13];
		sum += this.fields[8] * t.fields[14];
		sum += this.fields[12] * t.fields[15];
		output.fields[12] = sum;
		var sum = 0.;
		sum += this.fields[1] * t.fields[0];
		sum += this.fields[5] * t.fields[1];
		sum += this.fields[9] * t.fields[2];
		sum += this.fields[13] * t.fields[3];
		output.fields[1] = sum;
		var sum = 0.;
		sum += this.fields[1] * t.fields[4];
		sum += this.fields[5] * t.fields[5];
		sum += this.fields[9] * t.fields[6];
		sum += this.fields[13] * t.fields[7];
		output.fields[5] = sum;
		var sum = 0.;
		sum += this.fields[1] * t.fields[8];
		sum += this.fields[5] * t.fields[9];
		sum += this.fields[9] * t.fields[10];
		sum += this.fields[13] * t.fields[11];
		output.fields[9] = sum;
		var sum = 0.;
		sum += this.fields[1] * t.fields[12];
		sum += this.fields[5] * t.fields[13];
		sum += this.fields[9] * t.fields[14];
		sum += this.fields[13] * t.fields[15];
		output.fields[13] = sum;
		var sum = 0.;
		sum += this.fields[2] * t.fields[0];
		sum += this.fields[6] * t.fields[1];
		sum += this.fields[10] * t.fields[2];
		sum += this.fields[14] * t.fields[3];
		output.fields[2] = sum;
		var sum = 0.;
		sum += this.fields[2] * t.fields[4];
		sum += this.fields[6] * t.fields[5];
		sum += this.fields[10] * t.fields[6];
		sum += this.fields[14] * t.fields[7];
		output.fields[6] = sum;
		var sum = 0.;
		sum += this.fields[2] * t.fields[8];
		sum += this.fields[6] * t.fields[9];
		sum += this.fields[10] * t.fields[10];
		sum += this.fields[14] * t.fields[11];
		output.fields[10] = sum;
		var sum = 0.;
		sum += this.fields[2] * t.fields[12];
		sum += this.fields[6] * t.fields[13];
		sum += this.fields[10] * t.fields[14];
		sum += this.fields[14] * t.fields[15];
		output.fields[14] = sum;
		var sum = 0.;
		sum += this.fields[3] * t.fields[0];
		sum += this.fields[7] * t.fields[1];
		sum += this.fields[11] * t.fields[2];
		sum += this.fields[15] * t.fields[3];
		output.fields[3] = sum;
		var sum = 0.;
		sum += this.fields[3] * t.fields[4];
		sum += this.fields[7] * t.fields[5];
		sum += this.fields[11] * t.fields[6];
		sum += this.fields[15] * t.fields[7];
		output.fields[7] = sum;
		var sum = 0.;
		sum += this.fields[3] * t.fields[8];
		sum += this.fields[7] * t.fields[9];
		sum += this.fields[11] * t.fields[10];
		sum += this.fields[15] * t.fields[11];
		output.fields[11] = sum;
		var sum = 0.;
		sum += this.fields[3] * t.fields[12];
		sum += this.fields[7] * t.fields[13];
		sum += this.fields[11] * t.fields[14];
		sum += this.fields[15] * t.fields[15];
		output.fields[15] = sum;
		return output;
	}
	,translate: function(x,y,z) {
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var mat = new webglExample_Transformation();
		mat.fields[12] = x;
		mat.fields[13] = y;
		mat.fields[14] = z;
		var output = new webglExample_Transformation();
		var sum = 0.;
		sum += this.fields[0] * mat.fields[0];
		sum += this.fields[4] * mat.fields[1];
		sum += this.fields[8] * mat.fields[2];
		sum += this.fields[12] * mat.fields[3];
		output.fields[0] = sum;
		var sum = 0.;
		sum += this.fields[0] * mat.fields[4];
		sum += this.fields[4] * mat.fields[5];
		sum += this.fields[8] * mat.fields[6];
		sum += this.fields[12] * mat.fields[7];
		output.fields[4] = sum;
		var sum = 0.;
		sum += this.fields[0] * mat.fields[8];
		sum += this.fields[4] * mat.fields[9];
		sum += this.fields[8] * mat.fields[10];
		sum += this.fields[12] * mat.fields[11];
		output.fields[8] = sum;
		var sum = 0.;
		sum += this.fields[0] * mat.fields[12];
		sum += this.fields[4] * mat.fields[13];
		sum += this.fields[8] * mat.fields[14];
		sum += this.fields[12] * mat.fields[15];
		output.fields[12] = sum;
		var sum = 0.;
		sum += this.fields[1] * mat.fields[0];
		sum += this.fields[5] * mat.fields[1];
		sum += this.fields[9] * mat.fields[2];
		sum += this.fields[13] * mat.fields[3];
		output.fields[1] = sum;
		var sum = 0.;
		sum += this.fields[1] * mat.fields[4];
		sum += this.fields[5] * mat.fields[5];
		sum += this.fields[9] * mat.fields[6];
		sum += this.fields[13] * mat.fields[7];
		output.fields[5] = sum;
		var sum = 0.;
		sum += this.fields[1] * mat.fields[8];
		sum += this.fields[5] * mat.fields[9];
		sum += this.fields[9] * mat.fields[10];
		sum += this.fields[13] * mat.fields[11];
		output.fields[9] = sum;
		var sum = 0.;
		sum += this.fields[1] * mat.fields[12];
		sum += this.fields[5] * mat.fields[13];
		sum += this.fields[9] * mat.fields[14];
		sum += this.fields[13] * mat.fields[15];
		output.fields[13] = sum;
		var sum = 0.;
		sum += this.fields[2] * mat.fields[0];
		sum += this.fields[6] * mat.fields[1];
		sum += this.fields[10] * mat.fields[2];
		sum += this.fields[14] * mat.fields[3];
		output.fields[2] = sum;
		var sum = 0.;
		sum += this.fields[2] * mat.fields[4];
		sum += this.fields[6] * mat.fields[5];
		sum += this.fields[10] * mat.fields[6];
		sum += this.fields[14] * mat.fields[7];
		output.fields[6] = sum;
		var sum = 0.;
		sum += this.fields[2] * mat.fields[8];
		sum += this.fields[6] * mat.fields[9];
		sum += this.fields[10] * mat.fields[10];
		sum += this.fields[14] * mat.fields[11];
		output.fields[10] = sum;
		var sum = 0.;
		sum += this.fields[2] * mat.fields[12];
		sum += this.fields[6] * mat.fields[13];
		sum += this.fields[10] * mat.fields[14];
		sum += this.fields[14] * mat.fields[15];
		output.fields[14] = sum;
		var sum = 0.;
		sum += this.fields[3] * mat.fields[0];
		sum += this.fields[7] * mat.fields[1];
		sum += this.fields[11] * mat.fields[2];
		sum += this.fields[15] * mat.fields[3];
		output.fields[3] = sum;
		var sum = 0.;
		sum += this.fields[3] * mat.fields[4];
		sum += this.fields[7] * mat.fields[5];
		sum += this.fields[11] * mat.fields[6];
		sum += this.fields[15] * mat.fields[7];
		output.fields[7] = sum;
		var sum = 0.;
		sum += this.fields[3] * mat.fields[8];
		sum += this.fields[7] * mat.fields[9];
		sum += this.fields[11] * mat.fields[10];
		sum += this.fields[15] * mat.fields[11];
		output.fields[11] = sum;
		var sum = 0.;
		sum += this.fields[3] * mat.fields[12];
		sum += this.fields[7] * mat.fields[13];
		sum += this.fields[11] * mat.fields[14];
		sum += this.fields[15] * mat.fields[15];
		output.fields[15] = sum;
		return output;
	}
	,scale: function(x,y,z) {
		if(z == null) {
			z = 0.;
		}
		if(y == null) {
			y = 0.;
		}
		if(x == null) {
			x = 0.;
		}
		var mat = new webglExample_Transformation();
		mat.fields[0] = x;
		mat.fields[5] = y;
		mat.fields[10] = z;
		var output = new webglExample_Transformation();
		var sum = 0.;
		sum += this.fields[0] * mat.fields[0];
		sum += this.fields[4] * mat.fields[1];
		sum += this.fields[8] * mat.fields[2];
		sum += this.fields[12] * mat.fields[3];
		output.fields[0] = sum;
		var sum = 0.;
		sum += this.fields[0] * mat.fields[4];
		sum += this.fields[4] * mat.fields[5];
		sum += this.fields[8] * mat.fields[6];
		sum += this.fields[12] * mat.fields[7];
		output.fields[4] = sum;
		var sum = 0.;
		sum += this.fields[0] * mat.fields[8];
		sum += this.fields[4] * mat.fields[9];
		sum += this.fields[8] * mat.fields[10];
		sum += this.fields[12] * mat.fields[11];
		output.fields[8] = sum;
		var sum = 0.;
		sum += this.fields[0] * mat.fields[12];
		sum += this.fields[4] * mat.fields[13];
		sum += this.fields[8] * mat.fields[14];
		sum += this.fields[12] * mat.fields[15];
		output.fields[12] = sum;
		var sum = 0.;
		sum += this.fields[1] * mat.fields[0];
		sum += this.fields[5] * mat.fields[1];
		sum += this.fields[9] * mat.fields[2];
		sum += this.fields[13] * mat.fields[3];
		output.fields[1] = sum;
		var sum = 0.;
		sum += this.fields[1] * mat.fields[4];
		sum += this.fields[5] * mat.fields[5];
		sum += this.fields[9] * mat.fields[6];
		sum += this.fields[13] * mat.fields[7];
		output.fields[5] = sum;
		var sum = 0.;
		sum += this.fields[1] * mat.fields[8];
		sum += this.fields[5] * mat.fields[9];
		sum += this.fields[9] * mat.fields[10];
		sum += this.fields[13] * mat.fields[11];
		output.fields[9] = sum;
		var sum = 0.;
		sum += this.fields[1] * mat.fields[12];
		sum += this.fields[5] * mat.fields[13];
		sum += this.fields[9] * mat.fields[14];
		sum += this.fields[13] * mat.fields[15];
		output.fields[13] = sum;
		var sum = 0.;
		sum += this.fields[2] * mat.fields[0];
		sum += this.fields[6] * mat.fields[1];
		sum += this.fields[10] * mat.fields[2];
		sum += this.fields[14] * mat.fields[3];
		output.fields[2] = sum;
		var sum = 0.;
		sum += this.fields[2] * mat.fields[4];
		sum += this.fields[6] * mat.fields[5];
		sum += this.fields[10] * mat.fields[6];
		sum += this.fields[14] * mat.fields[7];
		output.fields[6] = sum;
		var sum = 0.;
		sum += this.fields[2] * mat.fields[8];
		sum += this.fields[6] * mat.fields[9];
		sum += this.fields[10] * mat.fields[10];
		sum += this.fields[14] * mat.fields[11];
		output.fields[10] = sum;
		var sum = 0.;
		sum += this.fields[2] * mat.fields[12];
		sum += this.fields[6] * mat.fields[13];
		sum += this.fields[10] * mat.fields[14];
		sum += this.fields[14] * mat.fields[15];
		output.fields[14] = sum;
		var sum = 0.;
		sum += this.fields[3] * mat.fields[0];
		sum += this.fields[7] * mat.fields[1];
		sum += this.fields[11] * mat.fields[2];
		sum += this.fields[15] * mat.fields[3];
		output.fields[3] = sum;
		var sum = 0.;
		sum += this.fields[3] * mat.fields[4];
		sum += this.fields[7] * mat.fields[5];
		sum += this.fields[11] * mat.fields[6];
		sum += this.fields[15] * mat.fields[7];
		output.fields[7] = sum;
		var sum = 0.;
		sum += this.fields[3] * mat.fields[8];
		sum += this.fields[7] * mat.fields[9];
		sum += this.fields[11] * mat.fields[10];
		sum += this.fields[15] * mat.fields[11];
		output.fields[11] = sum;
		var sum = 0.;
		sum += this.fields[3] * mat.fields[12];
		sum += this.fields[7] * mat.fields[13];
		sum += this.fields[11] * mat.fields[14];
		sum += this.fields[15] * mat.fields[15];
		output.fields[15] = sum;
		return output;
	}
	,rotateX: function(angle) {
		if(angle == null) {
			angle = 0.;
		}
		var c = Math.cos(angle);
		var s = Math.sin(angle);
		var mat = new webglExample_Transformation();
		mat.fields[5] = c;
		mat.fields[10] = c;
		mat.fields[9] = -s;
		mat.fields[6] = s;
		var output = new webglExample_Transformation();
		var sum = 0.;
		sum += this.fields[0] * mat.fields[0];
		sum += this.fields[4] * mat.fields[1];
		sum += this.fields[8] * mat.fields[2];
		sum += this.fields[12] * mat.fields[3];
		output.fields[0] = sum;
		var sum = 0.;
		sum += this.fields[0] * mat.fields[4];
		sum += this.fields[4] * mat.fields[5];
		sum += this.fields[8] * mat.fields[6];
		sum += this.fields[12] * mat.fields[7];
		output.fields[4] = sum;
		var sum = 0.;
		sum += this.fields[0] * mat.fields[8];
		sum += this.fields[4] * mat.fields[9];
		sum += this.fields[8] * mat.fields[10];
		sum += this.fields[12] * mat.fields[11];
		output.fields[8] = sum;
		var sum = 0.;
		sum += this.fields[0] * mat.fields[12];
		sum += this.fields[4] * mat.fields[13];
		sum += this.fields[8] * mat.fields[14];
		sum += this.fields[12] * mat.fields[15];
		output.fields[12] = sum;
		var sum = 0.;
		sum += this.fields[1] * mat.fields[0];
		sum += this.fields[5] * mat.fields[1];
		sum += this.fields[9] * mat.fields[2];
		sum += this.fields[13] * mat.fields[3];
		output.fields[1] = sum;
		var sum = 0.;
		sum += this.fields[1] * mat.fields[4];
		sum += this.fields[5] * mat.fields[5];
		sum += this.fields[9] * mat.fields[6];
		sum += this.fields[13] * mat.fields[7];
		output.fields[5] = sum;
		var sum = 0.;
		sum += this.fields[1] * mat.fields[8];
		sum += this.fields[5] * mat.fields[9];
		sum += this.fields[9] * mat.fields[10];
		sum += this.fields[13] * mat.fields[11];
		output.fields[9] = sum;
		var sum = 0.;
		sum += this.fields[1] * mat.fields[12];
		sum += this.fields[5] * mat.fields[13];
		sum += this.fields[9] * mat.fields[14];
		sum += this.fields[13] * mat.fields[15];
		output.fields[13] = sum;
		var sum = 0.;
		sum += this.fields[2] * mat.fields[0];
		sum += this.fields[6] * mat.fields[1];
		sum += this.fields[10] * mat.fields[2];
		sum += this.fields[14] * mat.fields[3];
		output.fields[2] = sum;
		var sum = 0.;
		sum += this.fields[2] * mat.fields[4];
		sum += this.fields[6] * mat.fields[5];
		sum += this.fields[10] * mat.fields[6];
		sum += this.fields[14] * mat.fields[7];
		output.fields[6] = sum;
		var sum = 0.;
		sum += this.fields[2] * mat.fields[8];
		sum += this.fields[6] * mat.fields[9];
		sum += this.fields[10] * mat.fields[10];
		sum += this.fields[14] * mat.fields[11];
		output.fields[10] = sum;
		var sum = 0.;
		sum += this.fields[2] * mat.fields[12];
		sum += this.fields[6] * mat.fields[13];
		sum += this.fields[10] * mat.fields[14];
		sum += this.fields[14] * mat.fields[15];
		output.fields[14] = sum;
		var sum = 0.;
		sum += this.fields[3] * mat.fields[0];
		sum += this.fields[7] * mat.fields[1];
		sum += this.fields[11] * mat.fields[2];
		sum += this.fields[15] * mat.fields[3];
		output.fields[3] = sum;
		var sum = 0.;
		sum += this.fields[3] * mat.fields[4];
		sum += this.fields[7] * mat.fields[5];
		sum += this.fields[11] * mat.fields[6];
		sum += this.fields[15] * mat.fields[7];
		output.fields[7] = sum;
		var sum = 0.;
		sum += this.fields[3] * mat.fields[8];
		sum += this.fields[7] * mat.fields[9];
		sum += this.fields[11] * mat.fields[10];
		sum += this.fields[15] * mat.fields[11];
		output.fields[11] = sum;
		var sum = 0.;
		sum += this.fields[3] * mat.fields[12];
		sum += this.fields[7] * mat.fields[13];
		sum += this.fields[11] * mat.fields[14];
		sum += this.fields[15] * mat.fields[15];
		output.fields[15] = sum;
		return output;
	}
	,rotateY: function(angle) {
		if(angle == null) {
			angle = 0.;
		}
		var c = Math.cos(angle);
		var s = Math.sin(angle);
		var mat = new webglExample_Transformation();
		mat.fields[0] = c;
		mat.fields[10] = c;
		mat.fields[2] = -s;
		mat.fields[8] = s;
		var output = new webglExample_Transformation();
		var sum = 0.;
		sum += this.fields[0] * mat.fields[0];
		sum += this.fields[4] * mat.fields[1];
		sum += this.fields[8] * mat.fields[2];
		sum += this.fields[12] * mat.fields[3];
		output.fields[0] = sum;
		var sum = 0.;
		sum += this.fields[0] * mat.fields[4];
		sum += this.fields[4] * mat.fields[5];
		sum += this.fields[8] * mat.fields[6];
		sum += this.fields[12] * mat.fields[7];
		output.fields[4] = sum;
		var sum = 0.;
		sum += this.fields[0] * mat.fields[8];
		sum += this.fields[4] * mat.fields[9];
		sum += this.fields[8] * mat.fields[10];
		sum += this.fields[12] * mat.fields[11];
		output.fields[8] = sum;
		var sum = 0.;
		sum += this.fields[0] * mat.fields[12];
		sum += this.fields[4] * mat.fields[13];
		sum += this.fields[8] * mat.fields[14];
		sum += this.fields[12] * mat.fields[15];
		output.fields[12] = sum;
		var sum = 0.;
		sum += this.fields[1] * mat.fields[0];
		sum += this.fields[5] * mat.fields[1];
		sum += this.fields[9] * mat.fields[2];
		sum += this.fields[13] * mat.fields[3];
		output.fields[1] = sum;
		var sum = 0.;
		sum += this.fields[1] * mat.fields[4];
		sum += this.fields[5] * mat.fields[5];
		sum += this.fields[9] * mat.fields[6];
		sum += this.fields[13] * mat.fields[7];
		output.fields[5] = sum;
		var sum = 0.;
		sum += this.fields[1] * mat.fields[8];
		sum += this.fields[5] * mat.fields[9];
		sum += this.fields[9] * mat.fields[10];
		sum += this.fields[13] * mat.fields[11];
		output.fields[9] = sum;
		var sum = 0.;
		sum += this.fields[1] * mat.fields[12];
		sum += this.fields[5] * mat.fields[13];
		sum += this.fields[9] * mat.fields[14];
		sum += this.fields[13] * mat.fields[15];
		output.fields[13] = sum;
		var sum = 0.;
		sum += this.fields[2] * mat.fields[0];
		sum += this.fields[6] * mat.fields[1];
		sum += this.fields[10] * mat.fields[2];
		sum += this.fields[14] * mat.fields[3];
		output.fields[2] = sum;
		var sum = 0.;
		sum += this.fields[2] * mat.fields[4];
		sum += this.fields[6] * mat.fields[5];
		sum += this.fields[10] * mat.fields[6];
		sum += this.fields[14] * mat.fields[7];
		output.fields[6] = sum;
		var sum = 0.;
		sum += this.fields[2] * mat.fields[8];
		sum += this.fields[6] * mat.fields[9];
		sum += this.fields[10] * mat.fields[10];
		sum += this.fields[14] * mat.fields[11];
		output.fields[10] = sum;
		var sum = 0.;
		sum += this.fields[2] * mat.fields[12];
		sum += this.fields[6] * mat.fields[13];
		sum += this.fields[10] * mat.fields[14];
		sum += this.fields[14] * mat.fields[15];
		output.fields[14] = sum;
		var sum = 0.;
		sum += this.fields[3] * mat.fields[0];
		sum += this.fields[7] * mat.fields[1];
		sum += this.fields[11] * mat.fields[2];
		sum += this.fields[15] * mat.fields[3];
		output.fields[3] = sum;
		var sum = 0.;
		sum += this.fields[3] * mat.fields[4];
		sum += this.fields[7] * mat.fields[5];
		sum += this.fields[11] * mat.fields[6];
		sum += this.fields[15] * mat.fields[7];
		output.fields[7] = sum;
		var sum = 0.;
		sum += this.fields[3] * mat.fields[8];
		sum += this.fields[7] * mat.fields[9];
		sum += this.fields[11] * mat.fields[10];
		sum += this.fields[15] * mat.fields[11];
		output.fields[11] = sum;
		var sum = 0.;
		sum += this.fields[3] * mat.fields[12];
		sum += this.fields[7] * mat.fields[13];
		sum += this.fields[11] * mat.fields[14];
		sum += this.fields[15] * mat.fields[15];
		output.fields[15] = sum;
		return output;
	}
	,rotateZ: function(angle) {
		if(angle == null) {
			angle = 0.;
		}
		var c = Math.cos(angle);
		var s = Math.sin(angle);
		var mat = new webglExample_Transformation();
		mat.fields[0] = c;
		mat.fields[5] = c;
		mat.fields[4] = -s;
		mat.fields[1] = s;
		var output = new webglExample_Transformation();
		var sum = 0.;
		sum += this.fields[0] * mat.fields[0];
		sum += this.fields[4] * mat.fields[1];
		sum += this.fields[8] * mat.fields[2];
		sum += this.fields[12] * mat.fields[3];
		output.fields[0] = sum;
		var sum = 0.;
		sum += this.fields[0] * mat.fields[4];
		sum += this.fields[4] * mat.fields[5];
		sum += this.fields[8] * mat.fields[6];
		sum += this.fields[12] * mat.fields[7];
		output.fields[4] = sum;
		var sum = 0.;
		sum += this.fields[0] * mat.fields[8];
		sum += this.fields[4] * mat.fields[9];
		sum += this.fields[8] * mat.fields[10];
		sum += this.fields[12] * mat.fields[11];
		output.fields[8] = sum;
		var sum = 0.;
		sum += this.fields[0] * mat.fields[12];
		sum += this.fields[4] * mat.fields[13];
		sum += this.fields[8] * mat.fields[14];
		sum += this.fields[12] * mat.fields[15];
		output.fields[12] = sum;
		var sum = 0.;
		sum += this.fields[1] * mat.fields[0];
		sum += this.fields[5] * mat.fields[1];
		sum += this.fields[9] * mat.fields[2];
		sum += this.fields[13] * mat.fields[3];
		output.fields[1] = sum;
		var sum = 0.;
		sum += this.fields[1] * mat.fields[4];
		sum += this.fields[5] * mat.fields[5];
		sum += this.fields[9] * mat.fields[6];
		sum += this.fields[13] * mat.fields[7];
		output.fields[5] = sum;
		var sum = 0.;
		sum += this.fields[1] * mat.fields[8];
		sum += this.fields[5] * mat.fields[9];
		sum += this.fields[9] * mat.fields[10];
		sum += this.fields[13] * mat.fields[11];
		output.fields[9] = sum;
		var sum = 0.;
		sum += this.fields[1] * mat.fields[12];
		sum += this.fields[5] * mat.fields[13];
		sum += this.fields[9] * mat.fields[14];
		sum += this.fields[13] * mat.fields[15];
		output.fields[13] = sum;
		var sum = 0.;
		sum += this.fields[2] * mat.fields[0];
		sum += this.fields[6] * mat.fields[1];
		sum += this.fields[10] * mat.fields[2];
		sum += this.fields[14] * mat.fields[3];
		output.fields[2] = sum;
		var sum = 0.;
		sum += this.fields[2] * mat.fields[4];
		sum += this.fields[6] * mat.fields[5];
		sum += this.fields[10] * mat.fields[6];
		sum += this.fields[14] * mat.fields[7];
		output.fields[6] = sum;
		var sum = 0.;
		sum += this.fields[2] * mat.fields[8];
		sum += this.fields[6] * mat.fields[9];
		sum += this.fields[10] * mat.fields[10];
		sum += this.fields[14] * mat.fields[11];
		output.fields[10] = sum;
		var sum = 0.;
		sum += this.fields[2] * mat.fields[12];
		sum += this.fields[6] * mat.fields[13];
		sum += this.fields[10] * mat.fields[14];
		sum += this.fields[14] * mat.fields[15];
		output.fields[14] = sum;
		var sum = 0.;
		sum += this.fields[3] * mat.fields[0];
		sum += this.fields[7] * mat.fields[1];
		sum += this.fields[11] * mat.fields[2];
		sum += this.fields[15] * mat.fields[3];
		output.fields[3] = sum;
		var sum = 0.;
		sum += this.fields[3] * mat.fields[4];
		sum += this.fields[7] * mat.fields[5];
		sum += this.fields[11] * mat.fields[6];
		sum += this.fields[15] * mat.fields[7];
		output.fields[7] = sum;
		var sum = 0.;
		sum += this.fields[3] * mat.fields[8];
		sum += this.fields[7] * mat.fields[9];
		sum += this.fields[11] * mat.fields[10];
		sum += this.fields[15] * mat.fields[11];
		output.fields[11] = sum;
		var sum = 0.;
		sum += this.fields[3] * mat.fields[12];
		sum += this.fields[7] * mat.fields[13];
		sum += this.fields[11] * mat.fields[14];
		sum += this.fields[15] * mat.fields[15];
		output.fields[15] = sum;
		return output;
	}
	,sendToGpu: function(gl,uniform,transpose) {
		if(transpose == null) {
			transpose = false;
		}
		var this1 = new Float32Array(this.fields);
		gl.uniformMatrix4fv(uniform,transpose,this1);
	}
};
var webglExample_Vbo = function(gl,data,count) {
	var bufferObject = gl.createBuffer();
	this.buffer = bufferObject;
	gl.bindBuffer(34962,bufferObject);
	gl.bufferData(34962,new Float32Array(data),35044);
	this.gl = gl;
	this.size = data.length / count | 0;
	this.count = count;
};
webglExample_Vbo.__name__ = true;
webglExample_Vbo.prototype = {
	destroy: function() {
		this.gl.deleteBuffer(this.buffer);
	}
	,bindToAttribute: function(attribute) {
		this.gl.bindBuffer(34962,this.buffer);
		this.gl.enableVertexAttribArray(attribute);
		this.gl.vertexAttribPointer(attribute,this.size,5126,false,0,0);
	}
};
var webglExample_WebGLExample = function() {
	this.hRef = "/";
	this.objects = [];
	this.light = new webglExample_Light();
	this.camera = new webglExample_Camera();
	console.log("src/webglExample/WebGLExample.hx:24:","create WebGLExample");
	console.log("src/webglExample/WebGLExample.hx:25:",window.document.location.hostname);
	this.hRef = window.document.location.href + "/";
	this.canvasGL = window.document.createElement("canvas");
	this.canvasGL.width = 800;
	this.canvasGL.height = 600;
	var domGL = this.canvasGL;
	window.document.body.appendChild(this.canvasGL);
	var style = domGL.style;
	style.paddingLeft = Std.string(0 + "px");
	style.paddingTop = Std.string(0 + "px");
	style.left = Std.string(0 + "px");
	style.top = Std.string(0 + "px");
	style.position = "absolute";
	this.renderer = new webglExample_Renderer(this.canvasGL);
	this.renderer.gl.clearColor(0.392156862745098034,0.584313725490196112,0.929411764705882382,1.);
	this.gl = this.renderer.gl;
	var _gthis = this;
	var gl = this.gl;
	var textureUrl = this.hRef + "assets/diffuse.png";
	var geometry = webglExample_geometry_GeometryParser_loadOBJ(this.hRef + "assets/sphere.obj");
	var texture = webglExample_Texture.load(gl,textureUrl);
	Promise.all([geometry,texture]).then(function(params) {
		return new webglExample_Mesh(gl,params[0],params[1]);
	}).then(function(mesh) {
		_gthis.objects.push(mesh);
		console.log("src/webglExample/WebGLExample.hx:47:","mesh set");
	});
	var _gthis1 = this;
	var gl1 = this.gl;
	var url = this.hRef + "shaders/basic.vert";
	var url1 = this.hRef + "shaders/basic.frag";
	Promise.all([new Promise(function(resolve,reject) {
		var xhr = new XMLHttpRequest();
		xhr.onreadystatechange = function() {
			if(xhr.readyState == 4) {
				resolve(xhr.responseText);
			}
		};
		xhr.open("GET",url,true);
		xhr.send(null);
	}),new Promise(function(resolve,reject) {
		var xhr = new XMLHttpRequest();
		xhr.onreadystatechange = function() {
			if(xhr.readyState == 4) {
				resolve(xhr.responseText);
			}
		};
		xhr.open("GET",url1,true);
		xhr.send(null);
	})]).then(function(files) {
		return new webglExample_ShaderProgram(gl1,files[0],files[1]);
	}).then(function(shader) {
		var _this = _gthis1.renderer;
		console.log("src/webglExample/Renderer.hx:24:","shader set");
		_this.shaderProgram = shader;
		console.log("src/webglExample/WebGLExample.hx:57:","shader setup");
	});
	var _this = this.camera;
	_this.projection = new webglExample_Transformation();
	_this.projection.fields[0] = 0.125;
	_this.projection.fields[5] = 0.2;
	_this.projection.fields[10] = -0.2;
	this.loop(60);
};
webglExample_WebGLExample.__name__ = true;
webglExample_WebGLExample.prototype = {
	loadMesh: function() {
		var _gthis = this;
		var gl = this.gl;
		var textureUrl = this.hRef + "assets/diffuse.png";
		var geometry = webglExample_geometry_GeometryParser_loadOBJ(this.hRef + "assets/sphere.obj");
		var texture = webglExample_Texture.load(gl,textureUrl);
		Promise.all([geometry,texture]).then(function(params) {
			return new webglExample_Mesh(gl,params[0],params[1]);
		}).then(function(mesh) {
			_gthis.objects.push(mesh);
			console.log("src/webglExample/WebGLExample.hx:47:","mesh set");
		});
	}
	,loadShader: function() {
		var _gthis = this;
		var gl = this.gl;
		var url = this.hRef + "shaders/basic.vert";
		var url1 = this.hRef + "shaders/basic.frag";
		Promise.all([new Promise(function(resolve,reject) {
			var xhr = new XMLHttpRequest();
			xhr.onreadystatechange = function() {
				if(xhr.readyState == 4) {
					resolve(xhr.responseText);
				}
			};
			xhr.open("GET",url,true);
			xhr.send(null);
		}),new Promise(function(resolve,reject) {
			var xhr = new XMLHttpRequest();
			xhr.onreadystatechange = function() {
				if(xhr.readyState == 4) {
					resolve(xhr.responseText);
				}
			};
			xhr.open("GET",url1,true);
			xhr.send(null);
		})]).then(function(files) {
			return new webglExample_ShaderProgram(gl,files[0],files[1]);
		}).then(function(shader) {
			var _this = _gthis.renderer;
			console.log("src/webglExample/Renderer.hx:24:","shader set");
			_this.shaderProgram = shader;
			console.log("src/webglExample/WebGLExample.hx:57:","shader setup");
		});
	}
	,orthogonalCameraSetup: function() {
		var _this = this.camera;
		_this.projection = new webglExample_Transformation();
		_this.projection.fields[0] = 0.125;
		_this.projection.fields[5] = 0.2;
		_this.projection.fields[10] = -0.2;
	}
	,createCanvas: function() {
		this.canvasGL = window.document.createElement("canvas");
		this.canvasGL.width = 800;
		this.canvasGL.height = 600;
		var domGL = this.canvasGL;
		window.document.body.appendChild(this.canvasGL);
		var style = domGL.style;
		style.paddingLeft = Std.string(0 + "px");
		style.paddingTop = Std.string(0 + "px");
		style.left = Std.string(0 + "px");
		style.top = Std.string(0 + "px");
		style.position = "absolute";
	}
	,styleZero: function(domGL) {
		var style = domGL.style;
		style.paddingLeft = Std.string(0 + "px");
		style.paddingTop = Std.string(0 + "px");
		style.left = Std.string(0 + "px");
		style.top = Std.string(0 + "px");
		style.position = "absolute";
	}
	,px: function(v) {
		return Std.string(v + "px");
	}
	,loop: function(v) {
		var _this = this.renderer;
		var camera = this.camera;
		var light = this.light;
		var objects = this.objects;
		_this.gl.clear(16640);
		if(_this.shaderProgram != null) {
			_this.shaderProgram.useShader();
			light.useLight(_this.shaderProgram);
			var shaderProgram = _this.shaderProgram;
			var this1 = new Float32Array(camera.projection.fields);
			shaderProgram.gl.uniformMatrix4fv(shaderProgram.projection,false,this1);
			var orig = camera.position.fields;
			var dest = new webglExample_Transformation();
			var x = orig[12];
			var y = orig[13];
			var z = orig[14];
			dest.fields[0] = orig[0];
			dest.fields[1] = orig[4];
			dest.fields[2] = orig[8];
			dest.fields[4] = orig[1];
			dest.fields[5] = orig[5];
			dest.fields[6] = orig[9];
			dest.fields[8] = orig[2];
			dest.fields[9] = orig[6];
			dest.fields[10] = orig[10];
			var x1 = -x;
			var y1 = -y;
			var z1 = -z;
			if(z1 == null) {
				z1 = 0.;
			}
			if(y1 == null) {
				y1 = 0.;
			}
			if(x1 == null) {
				x1 = 0.;
			}
			var mat = new webglExample_Transformation();
			mat.fields[12] = x1;
			mat.fields[13] = y1;
			mat.fields[14] = z1;
			var output = new webglExample_Transformation();
			var sum = 0.;
			sum += dest.fields[0] * mat.fields[0];
			sum += dest.fields[4] * mat.fields[1];
			sum += dest.fields[8] * mat.fields[2];
			sum += dest.fields[12] * mat.fields[3];
			output.fields[0] = sum;
			var sum = 0.;
			sum += dest.fields[0] * mat.fields[4];
			sum += dest.fields[4] * mat.fields[5];
			sum += dest.fields[8] * mat.fields[6];
			sum += dest.fields[12] * mat.fields[7];
			output.fields[4] = sum;
			var sum = 0.;
			sum += dest.fields[0] * mat.fields[8];
			sum += dest.fields[4] * mat.fields[9];
			sum += dest.fields[8] * mat.fields[10];
			sum += dest.fields[12] * mat.fields[11];
			output.fields[8] = sum;
			var sum = 0.;
			sum += dest.fields[0] * mat.fields[12];
			sum += dest.fields[4] * mat.fields[13];
			sum += dest.fields[8] * mat.fields[14];
			sum += dest.fields[12] * mat.fields[15];
			output.fields[12] = sum;
			var sum = 0.;
			sum += dest.fields[1] * mat.fields[0];
			sum += dest.fields[5] * mat.fields[1];
			sum += dest.fields[9] * mat.fields[2];
			sum += dest.fields[13] * mat.fields[3];
			output.fields[1] = sum;
			var sum = 0.;
			sum += dest.fields[1] * mat.fields[4];
			sum += dest.fields[5] * mat.fields[5];
			sum += dest.fields[9] * mat.fields[6];
			sum += dest.fields[13] * mat.fields[7];
			output.fields[5] = sum;
			var sum = 0.;
			sum += dest.fields[1] * mat.fields[8];
			sum += dest.fields[5] * mat.fields[9];
			sum += dest.fields[9] * mat.fields[10];
			sum += dest.fields[13] * mat.fields[11];
			output.fields[9] = sum;
			var sum = 0.;
			sum += dest.fields[1] * mat.fields[12];
			sum += dest.fields[5] * mat.fields[13];
			sum += dest.fields[9] * mat.fields[14];
			sum += dest.fields[13] * mat.fields[15];
			output.fields[13] = sum;
			var sum = 0.;
			sum += dest.fields[2] * mat.fields[0];
			sum += dest.fields[6] * mat.fields[1];
			sum += dest.fields[10] * mat.fields[2];
			sum += dest.fields[14] * mat.fields[3];
			output.fields[2] = sum;
			var sum = 0.;
			sum += dest.fields[2] * mat.fields[4];
			sum += dest.fields[6] * mat.fields[5];
			sum += dest.fields[10] * mat.fields[6];
			sum += dest.fields[14] * mat.fields[7];
			output.fields[6] = sum;
			var sum = 0.;
			sum += dest.fields[2] * mat.fields[8];
			sum += dest.fields[6] * mat.fields[9];
			sum += dest.fields[10] * mat.fields[10];
			sum += dest.fields[14] * mat.fields[11];
			output.fields[10] = sum;
			var sum = 0.;
			sum += dest.fields[2] * mat.fields[12];
			sum += dest.fields[6] * mat.fields[13];
			sum += dest.fields[10] * mat.fields[14];
			sum += dest.fields[14] * mat.fields[15];
			output.fields[14] = sum;
			var sum = 0.;
			sum += dest.fields[3] * mat.fields[0];
			sum += dest.fields[7] * mat.fields[1];
			sum += dest.fields[11] * mat.fields[2];
			sum += dest.fields[15] * mat.fields[3];
			output.fields[3] = sum;
			var sum = 0.;
			sum += dest.fields[3] * mat.fields[4];
			sum += dest.fields[7] * mat.fields[5];
			sum += dest.fields[11] * mat.fields[6];
			sum += dest.fields[15] * mat.fields[7];
			output.fields[7] = sum;
			var sum = 0.;
			sum += dest.fields[3] * mat.fields[8];
			sum += dest.fields[7] * mat.fields[9];
			sum += dest.fields[11] * mat.fields[10];
			sum += dest.fields[15] * mat.fields[11];
			output.fields[11] = sum;
			var sum = 0.;
			sum += dest.fields[3] * mat.fields[12];
			sum += dest.fields[7] * mat.fields[13];
			sum += dest.fields[11] * mat.fields[14];
			sum += dest.fields[15] * mat.fields[15];
			output.fields[15] = sum;
			var this1 = new Float32Array(output.fields);
			shaderProgram.gl.uniformMatrix4fv(shaderProgram.view,false,this1);
			var mesh;
			var _g = 0;
			var _g1 = objects.length;
			while(_g < _g1) {
				var i = _g++;
				mesh = objects[i];
				var shaderProgram = _this.shaderProgram;
				mesh.positions.bindToAttribute(shaderProgram.position);
				mesh.normals.bindToAttribute(shaderProgram.normal);
				mesh.uvs.bindToAttribute(shaderProgram.uv);
				var this1 = new Float32Array(mesh.position.fields);
				mesh.gl.uniformMatrix4fv(shaderProgram.model,false,this1);
				var _this1 = mesh.texture;
				var uniform = shaderProgram.diffuse;
				var texture = _this1.data;
				var _2D = 3553;
				_this1.gl.activeTexture(33984);
				_this1.gl.bindTexture(_2D,texture);
				_this1.gl.uniform1i(uniform,0);
				mesh.gl.drawArrays(4,0,mesh.vertexCount);
			}
		}
		var _this = this.camera.position;
		var angle = Math.PI / 120;
		if(angle == null) {
			angle = 0.;
		}
		var c = Math.cos(angle);
		var s = Math.sin(angle);
		var mat = new webglExample_Transformation();
		mat.fields[0] = c;
		mat.fields[10] = c;
		mat.fields[2] = -s;
		mat.fields[8] = s;
		var output = new webglExample_Transformation();
		var sum = 0.;
		sum += _this.fields[0] * mat.fields[0];
		sum += _this.fields[4] * mat.fields[1];
		sum += _this.fields[8] * mat.fields[2];
		sum += _this.fields[12] * mat.fields[3];
		output.fields[0] = sum;
		var sum = 0.;
		sum += _this.fields[0] * mat.fields[4];
		sum += _this.fields[4] * mat.fields[5];
		sum += _this.fields[8] * mat.fields[6];
		sum += _this.fields[12] * mat.fields[7];
		output.fields[4] = sum;
		var sum = 0.;
		sum += _this.fields[0] * mat.fields[8];
		sum += _this.fields[4] * mat.fields[9];
		sum += _this.fields[8] * mat.fields[10];
		sum += _this.fields[12] * mat.fields[11];
		output.fields[8] = sum;
		var sum = 0.;
		sum += _this.fields[0] * mat.fields[12];
		sum += _this.fields[4] * mat.fields[13];
		sum += _this.fields[8] * mat.fields[14];
		sum += _this.fields[12] * mat.fields[15];
		output.fields[12] = sum;
		var sum = 0.;
		sum += _this.fields[1] * mat.fields[0];
		sum += _this.fields[5] * mat.fields[1];
		sum += _this.fields[9] * mat.fields[2];
		sum += _this.fields[13] * mat.fields[3];
		output.fields[1] = sum;
		var sum = 0.;
		sum += _this.fields[1] * mat.fields[4];
		sum += _this.fields[5] * mat.fields[5];
		sum += _this.fields[9] * mat.fields[6];
		sum += _this.fields[13] * mat.fields[7];
		output.fields[5] = sum;
		var sum = 0.;
		sum += _this.fields[1] * mat.fields[8];
		sum += _this.fields[5] * mat.fields[9];
		sum += _this.fields[9] * mat.fields[10];
		sum += _this.fields[13] * mat.fields[11];
		output.fields[9] = sum;
		var sum = 0.;
		sum += _this.fields[1] * mat.fields[12];
		sum += _this.fields[5] * mat.fields[13];
		sum += _this.fields[9] * mat.fields[14];
		sum += _this.fields[13] * mat.fields[15];
		output.fields[13] = sum;
		var sum = 0.;
		sum += _this.fields[2] * mat.fields[0];
		sum += _this.fields[6] * mat.fields[1];
		sum += _this.fields[10] * mat.fields[2];
		sum += _this.fields[14] * mat.fields[3];
		output.fields[2] = sum;
		var sum = 0.;
		sum += _this.fields[2] * mat.fields[4];
		sum += _this.fields[6] * mat.fields[5];
		sum += _this.fields[10] * mat.fields[6];
		sum += _this.fields[14] * mat.fields[7];
		output.fields[6] = sum;
		var sum = 0.;
		sum += _this.fields[2] * mat.fields[8];
		sum += _this.fields[6] * mat.fields[9];
		sum += _this.fields[10] * mat.fields[10];
		sum += _this.fields[14] * mat.fields[11];
		output.fields[10] = sum;
		var sum = 0.;
		sum += _this.fields[2] * mat.fields[12];
		sum += _this.fields[6] * mat.fields[13];
		sum += _this.fields[10] * mat.fields[14];
		sum += _this.fields[14] * mat.fields[15];
		output.fields[14] = sum;
		var sum = 0.;
		sum += _this.fields[3] * mat.fields[0];
		sum += _this.fields[7] * mat.fields[1];
		sum += _this.fields[11] * mat.fields[2];
		sum += _this.fields[15] * mat.fields[3];
		output.fields[3] = sum;
		var sum = 0.;
		sum += _this.fields[3] * mat.fields[4];
		sum += _this.fields[7] * mat.fields[5];
		sum += _this.fields[11] * mat.fields[6];
		sum += _this.fields[15] * mat.fields[7];
		output.fields[7] = sum;
		var sum = 0.;
		sum += _this.fields[3] * mat.fields[8];
		sum += _this.fields[7] * mat.fields[9];
		sum += _this.fields[11] * mat.fields[10];
		sum += _this.fields[15] * mat.fields[11];
		output.fields[11] = sum;
		var sum = 0.;
		sum += _this.fields[3] * mat.fields[12];
		sum += _this.fields[7] * mat.fields[13];
		sum += _this.fields[11] * mat.fields[14];
		sum += _this.fields[15] * mat.fields[15];
		output.fields[15] = sum;
		this.camera.position = output;
		window.requestAnimationFrame($bind(this,this.loop));
	}
	,rotateHorizontally: function() {
		var _this = this.camera.position;
		var angle = Math.PI / 120;
		if(angle == null) {
			angle = 0.;
		}
		var c = Math.cos(angle);
		var s = Math.sin(angle);
		var mat = new webglExample_Transformation();
		mat.fields[0] = c;
		mat.fields[10] = c;
		mat.fields[2] = -s;
		mat.fields[8] = s;
		var output = new webglExample_Transformation();
		var sum = 0.;
		sum += _this.fields[0] * mat.fields[0];
		sum += _this.fields[4] * mat.fields[1];
		sum += _this.fields[8] * mat.fields[2];
		sum += _this.fields[12] * mat.fields[3];
		output.fields[0] = sum;
		var sum = 0.;
		sum += _this.fields[0] * mat.fields[4];
		sum += _this.fields[4] * mat.fields[5];
		sum += _this.fields[8] * mat.fields[6];
		sum += _this.fields[12] * mat.fields[7];
		output.fields[4] = sum;
		var sum = 0.;
		sum += _this.fields[0] * mat.fields[8];
		sum += _this.fields[4] * mat.fields[9];
		sum += _this.fields[8] * mat.fields[10];
		sum += _this.fields[12] * mat.fields[11];
		output.fields[8] = sum;
		var sum = 0.;
		sum += _this.fields[0] * mat.fields[12];
		sum += _this.fields[4] * mat.fields[13];
		sum += _this.fields[8] * mat.fields[14];
		sum += _this.fields[12] * mat.fields[15];
		output.fields[12] = sum;
		var sum = 0.;
		sum += _this.fields[1] * mat.fields[0];
		sum += _this.fields[5] * mat.fields[1];
		sum += _this.fields[9] * mat.fields[2];
		sum += _this.fields[13] * mat.fields[3];
		output.fields[1] = sum;
		var sum = 0.;
		sum += _this.fields[1] * mat.fields[4];
		sum += _this.fields[5] * mat.fields[5];
		sum += _this.fields[9] * mat.fields[6];
		sum += _this.fields[13] * mat.fields[7];
		output.fields[5] = sum;
		var sum = 0.;
		sum += _this.fields[1] * mat.fields[8];
		sum += _this.fields[5] * mat.fields[9];
		sum += _this.fields[9] * mat.fields[10];
		sum += _this.fields[13] * mat.fields[11];
		output.fields[9] = sum;
		var sum = 0.;
		sum += _this.fields[1] * mat.fields[12];
		sum += _this.fields[5] * mat.fields[13];
		sum += _this.fields[9] * mat.fields[14];
		sum += _this.fields[13] * mat.fields[15];
		output.fields[13] = sum;
		var sum = 0.;
		sum += _this.fields[2] * mat.fields[0];
		sum += _this.fields[6] * mat.fields[1];
		sum += _this.fields[10] * mat.fields[2];
		sum += _this.fields[14] * mat.fields[3];
		output.fields[2] = sum;
		var sum = 0.;
		sum += _this.fields[2] * mat.fields[4];
		sum += _this.fields[6] * mat.fields[5];
		sum += _this.fields[10] * mat.fields[6];
		sum += _this.fields[14] * mat.fields[7];
		output.fields[6] = sum;
		var sum = 0.;
		sum += _this.fields[2] * mat.fields[8];
		sum += _this.fields[6] * mat.fields[9];
		sum += _this.fields[10] * mat.fields[10];
		sum += _this.fields[14] * mat.fields[11];
		output.fields[10] = sum;
		var sum = 0.;
		sum += _this.fields[2] * mat.fields[12];
		sum += _this.fields[6] * mat.fields[13];
		sum += _this.fields[10] * mat.fields[14];
		sum += _this.fields[14] * mat.fields[15];
		output.fields[14] = sum;
		var sum = 0.;
		sum += _this.fields[3] * mat.fields[0];
		sum += _this.fields[7] * mat.fields[1];
		sum += _this.fields[11] * mat.fields[2];
		sum += _this.fields[15] * mat.fields[3];
		output.fields[3] = sum;
		var sum = 0.;
		sum += _this.fields[3] * mat.fields[4];
		sum += _this.fields[7] * mat.fields[5];
		sum += _this.fields[11] * mat.fields[6];
		sum += _this.fields[15] * mat.fields[7];
		output.fields[7] = sum;
		var sum = 0.;
		sum += _this.fields[3] * mat.fields[8];
		sum += _this.fields[7] * mat.fields[9];
		sum += _this.fields[11] * mat.fields[10];
		sum += _this.fields[15] * mat.fields[11];
		output.fields[11] = sum;
		var sum = 0.;
		sum += _this.fields[3] * mat.fields[12];
		sum += _this.fields[7] * mat.fields[13];
		sum += _this.fields[11] * mat.fields[14];
		sum += _this.fields[15] * mat.fields[15];
		output.fields[15] = sum;
		this.camera.position = output;
	}
};
function webglExample_WebGLExample_main() {
	new webglExample_WebGLExample();
}
var webglExample_geometry_Face = function(vertices) {
	this.vertices = vertices;
};
webglExample_geometry_Face.__name__ = true;
var webglExample_geometry_Geometry_$ = function(faces) {
	this.faces = faces;
};
webglExample_geometry_Geometry_$.__name__ = true;
var webglExample_geometry_Geometry = {};
webglExample_geometry_Geometry._new = function(faces) {
	var this1 = new webglExample_geometry_Geometry_$(faces);
	return this1;
};
webglExample_geometry_Geometry.vertexCount = function(this1) {
	return this1.faces.length * 3;
};
webglExample_geometry_Geometry.positions = function(this1) {
	var answer = [];
	var positionExtract = function(answer,vertex) {
		var v = vertex.position;
		answer.push(v.x);
		answer.push(v.y);
		answer.push(v.z);
		return answer;
	};
	var len = this1.faces.length;
	var vlen;
	var face;
	var vertex;
	var v;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		face = this1.faces[i];
		vlen = face.vertices.length;
		var _g2 = 0;
		var _g3 = vlen;
		while(_g2 < _g3) {
			var j = _g2++;
			vertex = face.vertices[j];
			positionExtract(answer,vertex);
		}
	}
	return answer;
};
webglExample_geometry_Geometry.normals = function(this1) {
	var answer = [];
	var normalExtract = function(answer,vertex) {
		var v = vertex.normal;
		answer.push(v.x);
		answer.push(v.y);
		answer.push(v.z);
		return answer;
	};
	var len = this1.faces.length;
	var vlen;
	var face;
	var vertex;
	var v;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		face = this1.faces[i];
		vlen = face.vertices.length;
		var _g2 = 0;
		var _g3 = vlen;
		while(_g2 < _g3) {
			var j = _g2++;
			vertex = face.vertices[j];
			normalExtract(answer,vertex);
		}
	}
	return answer;
};
webglExample_geometry_Geometry.uvs = function(this1) {
	var answer = [];
	var uvExtract = function(answer,vertex) {
		var v = vertex.uv;
		answer.push(v.x);
		answer.push(1 - v.y);
		return answer;
	};
	var len = this1.faces.length;
	var vlen;
	var face;
	var vertex;
	var v;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		face = this1.faces[i];
		vlen = face.vertices.length;
		var _g2 = 0;
		var _g3 = vlen;
		while(_g2 < _g3) {
			var j = _g2++;
			vertex = face.vertices[j];
			uvExtract(answer,vertex);
		}
	}
	return answer;
};
webglExample_geometry_Geometry.extract = function(this1,answer,f) {
	var len = this1.faces.length;
	var vlen;
	var face;
	var vertex;
	var v;
	var _g = 0;
	var _g1 = len;
	while(_g < _g1) {
		var i = _g++;
		face = this1.faces[i];
		vlen = face.vertices.length;
		var _g2 = 0;
		var _g3 = vlen;
		while(_g2 < _g3) {
			var j = _g2++;
			vertex = face.vertices[j];
			f(answer,vertex);
		}
	}
	return answer;
};
function webglExample_geometry_GeometryParser_objParser(src) {
	var lines = src.split("\n");
	var positions = [];
	var uvs = [];
	var normals = [];
	var faces = [];
	var count = 0;
	var _g = 0;
	var _g1 = lines.length;
	while(_g < _g1) {
		var i = _g++;
		var line = lines[i];
		if(webglExample_geometry_GeometryParser_position.match(line)) {
			var xs = webglExample_geometry_GeometryParser_position.matched(1);
			var ys = webglExample_geometry_GeometryParser_position.matched(2);
			var zs = webglExample_geometry_GeometryParser_position.matched(3);
			positions.push(new webglExample_geometry_Vector3(parseFloat(xs),parseFloat(ys),parseFloat(zs)));
		} else if(webglExample_geometry_GeometryParser_normal.match(line)) {
			var xs1 = webglExample_geometry_GeometryParser_normal.matched(1);
			var ys1 = webglExample_geometry_GeometryParser_normal.matched(2);
			var zs1 = webglExample_geometry_GeometryParser_normal.matched(3);
			normals.push(new webglExample_geometry_Vector3(parseFloat(xs1),parseFloat(ys1),parseFloat(zs1)));
		} else if(webglExample_geometry_GeometryParser_uv.match(line)) {
			var xs2 = webglExample_geometry_GeometryParser_uv.matched(1);
			var ys2 = webglExample_geometry_GeometryParser_uv.matched(2);
			uvs.push(new webglExample_geometry_Vector2(parseFloat(xs2),parseFloat(ys2)));
		} else if(webglExample_geometry_GeometryParser_face.match(line)) {
			var vertices = [];
			var i1 = 1;
			while(i1 < 10) {
				var p0 = Std.parseInt(webglExample_geometry_GeometryParser_face.matched(i1));
				var p1 = Std.parseInt(webglExample_geometry_GeometryParser_face.matched(i1 + 1));
				var p2 = Std.parseInt(webglExample_geometry_GeometryParser_face.matched(i1 + 2));
				var position = positions[p0 - 1];
				var uv = uvs[p1 - 1];
				var normal = normals[p2 - 1];
				vertices.push(new webglExample_geometry_Vertex(position,normal,uv));
				i1 += 3;
			}
			faces.push(new webglExample_geometry_Face(vertices));
		}
	}
	var this1 = new webglExample_geometry_Geometry_$(faces);
	return this1;
}
function webglExample_geometry_GeometryParser_loadOBJ(url) {
	return new Promise(function(resolve,reject) {
		var xhr = new XMLHttpRequest();
		xhr.onreadystatechange = function() {
			if(xhr.readyState == 4) {
				resolve(webglExample_geometry_GeometryParser_objParser(xhr.responseText));
			}
		};
		xhr.open("GET",url,true);
		xhr.send(null);
	});
}
var webglExample_geometry_Vector2 = function(x,y) {
	this.x = x;
	this.y = y;
};
webglExample_geometry_Vector2.__name__ = true;
webglExample_geometry_Vector2.fromStrings = function(xs,ys) {
	return new webglExample_geometry_Vector2(parseFloat(xs),parseFloat(ys));
};
var webglExample_geometry_Vector3 = function(x,y,z) {
	this.x = x;
	this.y = y;
	this.z = z;
};
webglExample_geometry_Vector3.__name__ = true;
webglExample_geometry_Vector3.fromStrings = function(xs,ys,zs) {
	return new webglExample_geometry_Vector3(parseFloat(xs),parseFloat(ys),parseFloat(zs));
};
var webglExample_geometry_Vertex = function(position,normal,uv) {
	this.position = position;
	this.normal = normal;
	this.uv = uv;
};
webglExample_geometry_Vertex.__name__ = true;
var $_;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
var webglExample_geometry_GeometryParser_position = new EReg("^v\\s+([\\d\\.\\+\\-eE]+)\\s+([\\d\\.\\+\\-eE]+)\\s+([\\d\\.\\+\\-eE]+)","");
var webglExample_geometry_GeometryParser_normal = new EReg("^vn\\s+([\\d\\.\\+\\-eE]+)\\s+([\\d\\.\\+\\-eE]+)\\s+([\\d\\.\\+\\-eE]+)","");
var webglExample_geometry_GeometryParser_uv = new EReg("^vt\\s+([\\d\\.\\+\\-eE]+)\\s+([\\d\\.\\+\\-eE]+)","");
var webglExample_geometry_GeometryParser_face = new EReg("^f\\s+(-?\\d+)/(-?\\d+)/(-?\\d+)\\s+(-?\\d+)/(-?\\d+)/(-?\\d+)\\s+(-?\\d+)/(-?\\d+)/(-?\\d+)(?:\\s+(-?\\d+)/(-?\\d+)/(-?\\d+))?","");
webglExample_WebGLExample_main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
